{"version":3,"sources":["components/Nav.js","components/Card.js","components/Cardlist.js","components/Loading.js","containers/App.js","serviceWorker.js","index.js"],"names":["Nav","search","Fragment","className","type","placeholder","onChange","Card","name","alt","src","Cardlist","characters","map","character","i","key","id","Loading","urls","App","getCharacter","a","characterData","Promise","all","url","fetch","resp","json","alert","onSearchChange","event","setState","searchfield","target","value","state","this","getCharacterData","characterArray","flatMap","results","filterUsers","filter","toLowerCase","includes","length","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ccb74a7d.chunk.js","sourcesContent":["import React from 'react';\n\n// search prop used for onChange events\n// to filter cards by user name\nconst Nav = ({ search }) => {\n  return(\n    <React.Fragment>\n      <header className=\"tc bg-black-60 w-100 fixed z-1 ph3 pv3 pv4-ns ph4-m ph5-l\">\n        <input\n          className=\"pa2 tc w-60 bg-lightest-blue\"\n          type=\"search\"\n          placeholder=\"Search StarWars Characters\"\n          onChange={search}\n        />\n      </header>\n    </React.Fragment>\n  );\n}\n\nexport default Nav;","import React from 'react';\n\nconst Card = ({ name }) => {\n  return(\n    // Style for card uses tachyons instead of creating css file.\n    //\n    <article className=\"dib br2 pa3 ma3 b--black-30 grow shadow-4\">\n      <div className=\"flex items-right\">\n        <img className=\"self-center br-100 h3 w3 ba bw2 b--black-40 pa2 bg-washed-blue\" \n          alt='robots'\n          // dicebear.com used to generated random avatars for cards\n          src={`https://avatars.dicebear.com/v2/bottts/${name}.svg`} \n        />\n        <div className=\"f4 ma2 pa2 tc white\">\n          <h3>{name}</h3>\n        </div>\n      </div>\n    </article>\n  );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n// Cardlist returns an array of card components\n// User object passed as prop from App.js \nconst Cardlist = ({ characters }) => {\n  return(\n    <div className=\"mw-none center pt6 ph5-ns tc\">\n      {/* Loop through user object and map id, name and email to Card component */}\n      {\n        characters.map((character, i) => {\n          return(\n          <Card \n            key={i}\n            id={character.id}\n            name={character.name}\n          />\n          );\n        }) \n      }\n    </div>\n  );\n}\n\nexport default Cardlist;","import React from 'react';\nimport './Loading.css';\n\nconst Loading = () => {\n  return(\n    <div className=\"container\">\n      <div className=\"view spinning\"></div>\n    </div>\n  );\n}\n\nexport default Loading;","import React, {Component} from 'react';\nimport Nav from '../components/Nav';\nimport Cardlist from '../components/Cardlist';\nimport Loading from '../components/Loading';\nimport './App.css';\n\nconst urls = ['https://swapi.py4e.com/api/people/?page=1',\n'https://swapi.py4e.com/api/people/?page=2',\n'https://swapi.py4e.com/api/people/?page=3',\n'https://swapi.py4e.com/api/people/?page=4',\n'https://swapi.py4e.com/api/people/?page=5',\n'https://swapi.py4e.com/api/people/?page=6',\n'https://swapi.py4e.com/api/people/?page=7',\n'https://swapi.py4e.com/api/people/?page=8',\n'https://swapi.py4e.com/api/people/?page=9',\n]\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      characters: [],\n      searchfield: ''\n    }\n  }\n\n  async componentDidMount() {\n    try {\n      const getCharacterData = await this.getCharacter(urls)\n      const characterArray = getCharacterData.flatMap(character => character.results)\n      this.setState({ characters: characterArray })\n    } catch {\n      alert('Oops something went wrong. Try refreshing the page')\n    }\n  }\n\n  getCharacter = async (urls) => {\n    try {\n      const characterData = Promise.all(urls.map(async function(url) {\n        const resp = await fetch(url);\n        return resp.json()\n        }));\n        return characterData;\n    } catch (err) {\n      alert('Oops something went wrong. Try refreshing the page')\n    }\n  }\n  \n  onSearchChange = (event) => {\n    this.setState({ searchfield: event.target.value })\n  }\n\n  render() {\n    const { searchfield, characters } = this.state;\n    const filterUsers = characters.filter(character => {\n      return character.name.toLowerCase().includes(searchfield.toLowerCase())\n    })\n    \n    return !characters.length ? <Loading /> :\n      (\n        <React.Fragment>\n          <Nav search={ this.onSearchChange } />\n          <Cardlist characters={filterUsers}/>\n        </React.Fragment>\n      );\n  }  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}